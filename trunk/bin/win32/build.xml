<?xml version="1.0"?>
<project name="AI_Win" default="build_continuous" basedir=".">
    <description>
        The Adapt It / Windows ant build script for command-line builds.
		This build script contains several build targets that can be used to
		build continuous, daily and release builds of Adapt It on Windows. The
		build targets towards the end of this script are used by the TeamCity
		CI build system:
		- build_continuous: called whenever there is a SVN change made.
		- build_release: called for daily / release builds.
    </description>
  <!-- global properties for this build -->
  <property environment="env"/>

  <!-- other directories -->
  <property name="SVNROOT" location="..\..\.."/>
  <property name="src" location="..\..\source"/>
  <property name="dist"  location="..\..\AIWX Installers"/>
  <property name="root"  location="..\.." />
  <property name="3pt"   location="..\..\..\vendor" />

  <!-- 
  - clean target
  - Removes intermediate files / directories
  -->
  <target name="clean"
        description="clean up artifacts from previous builds" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
	<!-- Delete expanded 3pt directories (edb removed to separate 3pt into separate build config) -->
	<!--
	<delete dir="${3pt}\boost\current\boost" />
	<delete dir="${3pt}\wxWidgets\2.8.12\wxWidgets-2.8.12" /> 
	<delete dir="${3pt}\wxWidgets\current\wxWidgets" />
	<delete dir="${3pt}\openssl\current\openssl" /> 
	<delete dir="${3pt}\curl\current\curl" /> 
	-->
    <!-- Delete ALL intermediate setup directories -->
    <delete dir="${root}\setup Regular"/>
    <delete dir="${root}\setup Regular - Minimal"/>
    <delete dir="${root}\setup Regular - No Html Help"/>
    <delete dir="${root}\setup Regular Documentation Only"/>
    <delete dir="${root}\setup Regular Localizations Only"/>
    <delete dir="${root}\setup Unicode"/>
    <delete dir="${root}\setup Unicode - Minimal"/>
    <delete dir="${root}\setup Unicode - No Html Help"/>
    <delete dir="${root}\setup Unicode Documentation Only"/>
    <delete dir="${root}\setup Unicode Localizations Only"/>
    <delete dir="${root}\bin\Adapt It WX Regular Setup\bin"/>
    <delete dir="${root}\bin\Adapt It WX Unicode Setup\bin"/>
  </target>
  
  <!-- quick test to see if the 3rd party libs have been expanded yet -->
  <target name="check-3pt">
    <!-- Create the time stamp -->
    <tstamp/>
	<available file="${3pt}\boost\current\boost\boost.css" property="3pt.expanded"/>
  </target>

  <!-- 
  - checkout target
  - Checks the source and 3pt libraries out of source control. This target
  - isn't used by the build machines (there's a separate TeamCity config page
  - for this).
  -->
  <target name="checkout">
    <!-- This target doesn't get called on the build machines; TeamCity handles this for us. -->
    <!-- Export source from SVN -->
    <exec executable="svn">
	<arg value="checkout" />
	<arg value="http://adaptit.googlecode.com/svn/trunk/ adaptit" />
    </exec>
    <!-- Export libs from SVN -->
    <exec executable="svn">
	<arg value="checkout" />
	<arg value="http://adaptit.googlecode.com/svn/vendor/ vendor" />
    </exec>
  </target>

  <!-- 
  - init target
  - Setup for the builds. This target unpacks the 3pt libraries, building them if
  - needed, then updates the environment variables that VSBuild needs to compile.
  -->
  <target name="init-3pt" depends="check-3pt" unless="3pt.expanded">
    <!-- extract 3pt libraries -->
    <exec dir="${root}\bin\win32" executable="7za.exe" failonerror="yes">
	<arg value="x" />
	<arg value="${3pt}/curl/current/curl.7z" />
	<arg value="-o${3pt}/curl/current/curl" />
	<arg value="-y" />
    </exec>
    <exec dir="${root}\bin\win32" executable="7za.exe" failonerror="yes">
	<arg value="x" />
	<arg value="${3pt}/openssl/current/openssl.7z" />
	<arg value="-o${3pt}/openssl/current/openssl" />
	<arg value="-y" />
    </exec>
    <exec dir="${root}\bin\win32" executable="7za.exe" failonerror="yes">
	<arg value="x" />
	<arg value="${3pt}/boost/current/boost.7z" />
	<arg value="-o${3pt}/boost/current" />
	<arg value="-y" />
    </exec>
	<!-- edb remove 2.9.x for now -->
	<!--
    <exec dir="${root}\bin\win32" executable="7za.exe" failonerror="yes">
	<arg value="x" />
	<arg value="${3pt}/wxwidgets/current/wxWidgets-2.9.4.7z" />
	<arg value="-o${3pt}/wxwidgets/current/wxWidgets" />
	<arg value="-y" />
    </exec>
    <copy file="${3pt}/wxwidgets/current/wxWidgets/include/wx/msw/setup.h" tofile="${3pt}/wxwidgets/current/wxWidgets/include/wx/setup.h"/>
	-->
    <unzip src="${3pt}/wxwidgets/2.8.12/wxWidgets-2.8.12.zip" 
		dest="${3pt}/wxwidgets/2.8.12">
    </unzip>
    <!-- wxWidgets needs us to tell it what OS platform we're building; we do this by
	     copying the setup.h file from the /msw directory up into the /include/wx directory.
         Do this now... (we'll build the wxWindows libs in the compile_xxx targets below) -->
    <copy file="${3pt}/wxwidgets/2.8.12/wxWidgets-2.8.12/include/wx/msw/setup.h" tofile="${3pt}/wxwidgets/2.8.12/wxWidgets-2.8.12/include/wx/setup.h"/>
  </target>

  <target name="init" depends="check-3pt" unless="3pt.expanded">
    <!-- extract 3pt libraries -->
    <exec dir="${root}\bin\win32" executable="7za.exe" failonerror="yes">
	<arg value="x" />
	<arg value="${3pt}/curl/current/curl.7z" />
	<arg value="-o${3pt}/curl/current/curl" />
	<arg value="-y" />
    </exec>
    <exec dir="${root}\bin\win32" executable="7za.exe" failonerror="yes">
	<arg value="x" />
	<arg value="${3pt}/openssl/current/openssl.7z" />
	<arg value="-o${3pt}/openssl/current/openssl" />
	<arg value="-y" />
    </exec>
    <exec dir="${root}\bin\win32" executable="7za.exe" failonerror="yes">
	<arg value="x" />
	<arg value="${3pt}/boost/current/boost.7z" />
	<arg value="-o${3pt}/boost/current" />
	<arg value="-y" />
    </exec>
  </target>
  
  <!-- 
  - compile_3pt_unicode_debug target
  - Compiles wxWidgets in Unicode Debug mode.
  -->
  <target name="compile_3pt_unicode" depends="init-3pt" description="compile the wxWidgets unicode targets (debug and release)" >
	<!-- set the appropriate environment variables -->
	<exec executable="${env.VS90COMNTOOLS}/vsvars32.bat" failonerror="no" />
    <!-- build wxwidgets for wxwin -->
    <exec executable="MSBuild.exe" failonerror="yes">
	  <arg value="/target:rebuild" />
	  <arg value="/p:Configuration=Unicode Debug" />
 	  <arg value="${3pt}/wxwidgets/2.8.12/wxWidgets-2.8.12/build/msw/wx_08.sln" />
    </exec>
    <!-- build wxwidgets for wxwin -->
    <exec executable="MSBuild.exe" failonerror="yes">
	  <arg value="/target:rebuild" />
	  <arg value="/p:Configuration=Unicode Release" />
 	  <arg value="${3pt}/wxwidgets/2.8.12/wxWidgets-2.8.12/build/msw/wx_08.sln" />
    </exec>
  </target>
  
  <!-- 
  - compile_Unicode_Debug target
  - Compiles AI in Unicode Debug mode.
  -->
  <target name="compile_unicode_debug" description="compile AI unicode debug target " >
	<!-- set the appropriate environment variables -->
	<exec executable="${env.VS90COMNTOOLS}/vsvars32.bat" failonerror="no" />
    <!-- Set the svn version numbers in Adapt_It.h and Adapt_It.rc. -->
	<replace file="${root}\source\Adapt_It.h" token="VERSION_REVISION_PART 0" value="VERSION_REVISION_PART ${svnversion}" />
	<replace file="Adapt_It.rc" token='VER_SVNVERSION_STR "0' value='VER_SVNVERSION_STR "${svnversion}' />
    <!-- build Adapt It -->
    <exec executable="MSBuild.exe" failonerror="yes">
		<env key="WXVER" value="28"/>
		<env key="WXWIN" value="${3pt}/wxWidgets/2.8.12/wxWidgets-2.8.12"/>
		<env key="BOOST" value="${3pt}/boost/current/boost"/>
		<env key="OPENSSL" value="${3pt}/openssl/current/openssl"/>
		<env key="LIBCURL" value="${3pt}/curl/current/curl"/>
		<arg value="${root}/bin/win32/Adapt_It_vs08.sln" />
		<arg value="/target:rebuild" />
		<arg value="/p:Configuration=Unicode Debug" />
    </exec>
  </target>

  <!-- 
  - compile_Unicode_Release target
  - Compiles AI in Unicode Release mode.
  -->
  <target name="compile_unicode_release" description="compile the source " >
	<!-- set the appropriate environment variables -->
	<exec executable="${env.VS90COMNTOOLS}/vsvars32.bat" failonerror="no" />
    <!-- Set the svn version numbers in Adapt_It.h and Adapt_It.rc. -->
	<replace file="${root}\source\Adapt_It.h" token="VERSION_REVISION_PART 0" value="VERSION_REVISION_PART ${svnversion}" />
	<replace file="Adapt_It.rc" token='VER_SVNVERSION_STR "0' value='VER_SVNVERSION_STR "${svnversion}' />
    <!-- build Adapt It -->
    <exec executable="MSBuild.exe" failonerror="yes">
		<env key="WXVER" value="28"/>
		<env key="WXWIN" value="${3pt}/wxWidgets/2.8.12/wxWidgets-2.8.12"/>
		<env key="BOOST" value="${3pt}/boost/current/boost"/>
		<env key="OPENSSL" value="${3pt}/openssl/current/openssl"/>
		<env key="LIBCURL" value="${3pt}/curl/current/curl"/>
		<arg value="${root}/bin/win32/Adapt_It_vs08.sln" />
		<arg value="/target:rebuild" />
		<arg value="/p:Configuration=Unicode Release" />
    </exec>
  </target>
  
  <!-- 
  - compile_msi target
  - Builds the AI msi installers (ANSI and Unicode).
  -->
  <target name="compile_msi_unicode" depends="compile_unicode_release, copy"
        description="compile the unicode msi installer" >
	<!-- set the appropriate environment variables -->
	<exec executable="${env.VS90COMNTOOLS}/vsvars32.bat" failonerror="no" />
    <!-- build the unicode release msi installer -->
	<!--
    <exec executable="MSBuild.exe" failonerror="yes">
		<env key="WXVER" value="29"/>
		<env key="WXWIN" value="${3pt}/wxWidgets/current/wxWidgets"/>
		<env key="BOOST" value="${3pt}/boost/current/boost"/>
		<env key="OPENSSL" value="${3pt}/openssl/current/openssl"/>
		<env key="LIBCURL" value="${3pt}/curl/current/curl"/>
		<arg value="${root}/bin/Adapt It WX Unicode Setup/Adapt It WX Unicode Setup.wixproj" />
		<arg value="/target:rebuild" />
		<arg value="/p:Configuration=Unicode Release" />
    </exec>
	-->
	<!-- candle.exe: WiX compiler -->
    <exec executable="candle.exe" failonerror="yes">
		<arg value="-nologo" />
		<arg value="${root}/bin/Adapt It WX Unicode Setup/Adapt It WX Unicode Setup.wxs" />
		<arg value="-out" />
		<arg value="${root}/bin/Adapt It WX Unicode Setup/Adapt It WX Unicode Setup.wixobj" />
		<arg value="-ext" />
		<arg value="WixUIExtension" />
    </exec>
	<!-- light.exe: WiX linker -->
    <exec executable="light.exe" failonerror="yes">
		<arg value="-nologo" />
		<arg value="${root}/bin/Adapt It WX Unicode Setup/Adapt It WX Unicode Setup.wixobj" />
		<arg value="-out" />
		<arg value="${root}/bin/Adapt It WX Unicode Setup/Adapt_It_WX_6_5_0_Unicode.msi" />
		<arg value="-ext" />
		<arg value="WixUIExtension" />
    </exec>
	<!-- copy the installer into the AIWX Installers directory -->
    <copy file="${root}/bin/Adapt It WX Unicode Setup/Adapt_It_WX_6_5_0_Unicode.msi" tofile="${dist}/Adapt_It_WX_6_5_0_Unicode.msi"/>
  </target>
  
  <!-- 
  - compile_msi target
  - Builds the AI msi installers (ANSI and Unicode).
  -->
  <target name="compile_msi_ansi" description="compile the ansi msi installer" >
	<!-- set the appropriate environment variables -->
	<exec executable="${env.VS90COMNTOOLS}/vsvars32.bat" failonerror="no" />
    <!-- build the regular (ANSI) msi installer -->
	<!--
    <exec executable="MSBuild.exe" failonerror="yes">
		<env key="WXVER" value="28"/>
		<env key="WXWIN" value="${3pt}/wxWidgets/2.8.12/wxWidgets-2.8.12"/>
		<env key="WXVER_VS05" value="28"/>
		<env key="WXWIN_VS05" value="${3pt}/wxWidgets/2.8.12/wxWidgets-2.8.12"/>
		<env key="BOOST" value="${3pt}/boost/current/boost"/>
		<env key="OPENSSL" value="${3pt}/openssl/current/openssl"/>
		<env key="LIBCURL" value="${3pt}/curl/current/curl"/>
		<arg value="${root}/bin/Adapt It WX Regular Setup/Adapt It WX Regular Setup.wixproj" />
		<arg value="/target:rebuild" />
		<arg value="/p:Configuration=Release" />
    </exec>
	-->
	<!-- candle.exe: WiX compiler -->
    <exec executable="candle.exe" failonerror="yes">
		<arg value="-nologo" />
		<arg value="${root}/bin/Adapt It WX Regular Setup/Adapt It WX Regular Setup.wxs" />
		<arg value="-out" />
		<arg value="${root}/bin/Adapt It WX Regular Setup/Adapt It WX Regular Setup.wixobj" />
		<arg value="-ext" />
		<arg value="WixUIExtension" />
    </exec>
	<!-- light.exe: WiX linker -->
    <exec executable="light.exe" failonerror="yes">
		<arg value="-nologo" />
		<arg value="${root}/bin/Adapt It WX Regular Setup/Adapt It WX Regular Setup.wixobj" />
		<arg value="-out" />
		<arg value="${root}/bin/Adapt It WX Regular Setup/Adapt_It_WX_6_5_0_Regular.msi" />
		<arg value="-ext" />
		<arg value="WixUIExtension" />
    </exec>
	<!-- copy the installer into the AIWX Installers directory -->
    <copy file="${root}/bin/Adapt It WX Regular Setup/Adapt_It_WX_6_5_0_Regular.msi" tofile="${dist}/Adapt_It_WX_6_5_0_Regular.msi"/>
  </target>

  <!-- 
  - compile_3pt_ansi target
  - compiles wxwidgets in ANSI release mode.
  -->
  <target name="compile_3pt_ansi" depends="init-3pt"
        description="compile wxWidgets ansi (release only) " >
	<!-- set the appropriate environment variables -->
	<exec executable="${env.VS90COMNTOOLS}/vsvars32.bat" failonerror="no" />
    <!-- build wxwidgets for wxwin -->
    <exec executable="MSBuild.exe" failonerror="yes">
	  <arg value="/target:rebuild" />
	  <arg value="/p:Configuration=Release" />
 	  <arg value="${3pt}/wxwidgets/2.8.12/wxWidgets-2.8.12/build/msw/wx_08.sln" />
    </exec>
  </target>
  
  <!-- 
  - compile_release target
  - compiles AI in ANSI release mode.
  -->
  <target name="compile_release" depends="init"
        description="compile the source " >
	<!-- set the appropriate environment variables -->
	<exec executable="${env.VS90COMNTOOLS}/vsvars32.bat" failonerror="no" />
    <!-- Set the svn version numbers in Adapt_It.h and Adapt_It.rc. -->
	<replace file="${root}\source\Adapt_It.h" token="VERSION_REVISION_PART 0" value="VERSION_REVISION_PART ${svnversion}" />
	<replace file="Adapt_It.rc" token='VER_SVNVERSION_STR "0' value='VER_SVNVERSION_STR "${svnversion}' />
    <!-- build Adapt It -->
    <exec executable="MSBuild.exe" failonerror="yes">
		<env key="WXVER" value="28"/>
		<env key="WXWIN" value="${3pt}/wxWidgets/2.8.12/wxWidgets-2.8.12"/>
		<env key="WXVER_VS05" value="28"/>
		<env key="WXWIN_VS05" value="${3pt}/wxWidgets/2.8.12/wxWidgets-2.8.12"/>
		<env key="OPENSSL" value="${3pt}/openssl/current/openssl"/>
		<env key="LIBCURL" value="${3pt}/curl/current/curl"/>
		<env key="BOOST" value="${3pt}/boost/current/boost"/>
		<arg value="${root}/bin/win32/Adapt_It_vs08.sln" />
		<arg value="/target:rebuild" />
		<arg value="/p:Configuration=Release" />
    </exec>
  </target>

  <!-- 
  - build_help target
  - Compiles the help files.
  -->
  <target name="build_help" description="compile the help files" >
    <!-- build the help files -->
    <exec executable="hhc.exe" failonerror="yes">
	<arg value="${root}/hlp/Adapt_It.hhp" />
    </exec>
  </target>
  
  <!-- 
  - copy target
  - Runs the CallAllBatchSetups.bat file, that copies docs, help, localizations and .exes to the setup
  - staging areas for the installers. This is called from the build_release target.
  -->
  <target name="copy" description="copy the build results to the setup staging areas">
    <!-- copying is done through a batch file -->
	<echo message="Copying files" />
    <exec dir="${root}" executable="cmd" failonerror="yes">
	  <arg value="/c" />
	  <arg value="${root}\CallAllBatchSetups.bat" />
    </exec>
  </target>

  <!-- 
  - generate_unicode_installers
  - Runs the unicode installer scripts to create the installers.
  - output will be in the ${dist} directory if successful.
  - This target gets called from the daily build.
  -->
  <target name="generate_unicode_installers" depends="copy"
        description="generate the distribution" >
    <!-- Run the Inno IDE scripts for unicode versions of Adapt It -->
    <exec executable="iscc" failonerror="yes">
	<arg value="/q" />
	<arg value="${root}/Inno_Setup_Scripts/Adapt It Unicode - Documentation Only.iss" />
    </exec>
    <exec executable="iscc" failonerror="yes">
	<arg value="/q" />
	<arg value="${root}/Inno_Setup_Scripts/Adapt It Unicode - Localizations Only.iss" />
    </exec>
    <exec executable="iscc" failonerror="yes">
	<arg value="/q" />
	<arg value="${root}/Inno_Setup_Scripts/Adapt It Unicode - Minimal.iss" />
    </exec>
    <exec executable="iscc" failonerror="yes">
	<arg value="/q" />
	<arg value="${root}/Inno_Setup_Scripts/Adapt It Unicode - No Html Help.iss" />
    </exec>
    <exec executable="iscc" failonerror="yes">
	<arg value="/q" />
	<arg value="${root}/Inno_Setup_Scripts/Adapt It Unicode.iss" />
    </exec>
  </target>

  <!-- 
  - generate_ansi_installers
  - Runs all the installer scripts to create the installers.
  - output will be in the ${dist} directory if successful.
  - This target gets called from the daily build.
  -->
  <target name="generate_ansi_installers" depends="copy"
        description="generate the distribution" >
    <!-- Run the Inno IDE scripts for ansi versions of Adapt It -->
    <exec executable="iscc" failonerror="yes">
	<arg value="/q" />
	<arg value="${root}/Inno_Setup_Scripts/Adapt It Regular - Documentation Only.iss" />
    </exec>
    <exec executable="iscc" failonerror="yes">
	<arg value="/q" />
	<arg value="${root}/Inno_Setup_Scripts/Adapt It Regular - Localizations Only.iss" />
    </exec>
    <exec executable="iscc" failonerror="yes">
	<arg value="/q" />
	<arg value="${root}/Inno_Setup_Scripts/Adapt It Regular - Minimal.iss" />
    </exec>
    <exec executable="iscc" failonerror="yes">
	<arg value="/q" />
	<arg value="${root}/Inno_Setup_Scripts/Adapt It Regular - No Html Help.iss" />
    </exec>
    <exec executable="iscc" failonerror="yes">
	<arg value="/q" />
	<arg value="${root}/Inno_Setup_Scripts/Adapt It Regular.iss" />
    </exec>
  </target>
  
  <!-- 
  - build_continuous target
  - Compiles the Unicode Debug build.
  -->
  <target name="build_continuous" depends="clean, init, compile_unicode_debug" description="Continuous build target" >
  </target>

  <!-- 
  - build_release target
  - Compiles the regular (ansi) and Unicode Release builds and creates the installers.
  -->
  <target name="build_release" depends="clean, init, compile_unicode_release, build_help, copy, generate_unicode_installers, compile_msi_unicode" description="Daily / Release build target (Unicode only)" >
  </target>

  <!-- 
  - build_legacy target
  - Compiles the regular (ansi) Debug and Release builds using the VS 2005 compiler.
  -->
  <target name="build_ansi" depends="clean, init, compile_release, build_help, copy, generate_ansi_installers, compile_msi_ansi" description="ANSI Debug and Release build target" >
  </target>

</project>