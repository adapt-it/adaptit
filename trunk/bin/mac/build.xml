<?xml version="1.0"?>
<project name="AI_Mac" default="build_continuous" basedir=".">
    <description>
        The Adapt It / Macintosh ant build script for command-line builds.
		This build script contains several build targets that can be used to
		build continuous, daily and release builds of Adapt It on OS X. The
		build targets towards the end of this script are used by the TeamCity
		CI build system:
		- build_continuous: called whenever there is a SVN change made.
		- build_release: called for daily / release builds.
    </description>
  <!-- global properties for this build -->
  <property environment="env"/>

  <!-- other directories -->
  <property name="SVNROOT" location="..\..\.."/>
  <property name="src" location="..\..\source"/>
  <property name="dist"  location="..\..\dist"/>
  <property name="root"  location="..\.." />
  <property name="3pt"   location="..\..\..\vendor" />

  <!-- 
  - clean target
  - Removes intermediate files / directories
  -->
  <target name="clean"
        description="clean up artifacts from previous builds" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
	<!-- Delete expanded 3pt directories -->
	<delete dir="${3pt}\boost\current\boost" />
	<delete dir="${3pt}\wxWidgets-2.8.12\wxWidgets-2.8.12" /> 
	<delete dir="${3pt}\wxWidgets\current\wxWidgets" /> 
	<delete dir="${3pt}\openssl\current\openssl" /> 
	<delete dir="${3pt}\curl\current\curl" /> 
  </target>

  <!-- 
  - checkout target
  - Checks the source and 3pt libraries out of source control. This target
  - isn't used by the build machines (there's a separate TeamCity config page
  - for this).
  -->
  <target name="checkout">
    <!-- This target doesn't get called on the build machines; TeamCity handles this for us. -->
    <!-- Export source from SVN -->
    <exec executable="svn">
	<arg value="checkout" />
	<arg value="http://adaptit.googlecode.com/svn/trunk/ adaptit" />
    </exec>
    <!-- Export libs from SVN -->
    <exec executable="svn">
	<arg value="checkout" />
	<arg value="http://adaptit.googlecode.com/svn/vendor/ vendor" />
    </exec>
  </target>

  <!-- 
  - init target
  - Setup for the builds. This target unpacks the 3pt libraries, building them if
  - needed, then updates the environment variables that VSBuild needs to compile.
  -->
  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- extract 3pt libraries -->
    <exec dir="${root}/bin/mac" executable="./7za" failonerror="yes">
	<arg value="x" />
	<arg value="${3pt}/curl/current/curl.7z" />
	<arg value="-o${3pt}/curl/current/curl" />
	<arg value="-y" />
    </exec>
    <exec dir="${root}/bin/mac" executable="./7za" failonerror="yes">
	<arg value="x" />
	<arg value="${3pt}/openssl/current/openssl.7z" />
	<arg value="-o${3pt}/openssl/current/openssl" />
	<arg value="-y" />
    </exec>
    <exec dir="${root}/bin/mac" executable="./7za" failonerror="yes">
	<arg value="x" />
	<arg value="${3pt}/boost/current/boost.7z" />
	<arg value="-o${3pt}/boost/current" />
	<arg value="-y" />
    </exec>
    <exec dir="${root}/bin/mac" executable="./7za" failonerror="yes">
	<arg value="x" />
	<arg value="${3pt}/wxwidgets/current/wxWidgets-2.9.4.7z" />
	<arg value="-o${3pt}/wxwidgets/current/wxWidgets" />
	<arg value="-y" />
    </exec>
    <exec dir="${root}/bin/mac" executable="./7za" failonerror="yes">
	<arg value="x" />
	<arg value="${3pt}/wxwidgets/2.8.12/wxWidgets-2.8.12.7z" />
	<arg value="-o${3pt}/wxwidgets/2.8.12" />
	<arg value="-y" />
    </exec>
    <!-- wxWidgets needs us to tell it what OS platform we're building; we do this by
	     copying the setup.h file from the /osx directory up into the /include/wx directory.
         Do this now... (we'll build the wxMac libs in the compile_xxx targets below) -->
    <copy file="${3pt}/wxwidgets/current/wxWidgets/include/wx/osx/setup.h" tofile="${3pt}/wxwidgets/current/wxWidgets/include/wx/setup.h"/>
    <!-- Set the svn version number in Adapt_It.h. -->
	<replace file="${root}\source\Adapt_It.h" token="VERSION_REVISION_PART 0" value="VERSION_REVISION_PART ${svnversion}" />
    <!-- make the wxwidgets / osx build directories -->
    <mkdir dir="${3pt}/wxwidgets/current/wxWidgets/buildosxu"/>
    <mkdir dir="${3pt}/wxwidgets/current/wxWidgets/buildosxud"/>
  </target>

  <!-- 
  - compile_debug_29 target
  - Compiles the CocoaDebugWX2.9 AI build configuration.
  -->
  
  <target name="compile_debug_29" depends="init"
        description="compile the source " >
    <!-- build wxwidgets for osx (unicode debug) -->
    <exec dir="${3pt}/wxwidgets/current/wxWidgets/buildosxud" executable="../config" failonerror="yes">
	  <arg value="--with-cocoa" />
	  <arg value="--with-macosx-version-min=10.5" />
	  <arg value="--enable-debug" />
	  <arg value="--with-macosx-sdk=/Developer/SDKs/MacOSX10.5.sdk" />
	  <arg value="--enable-unicode" />
	  <arg value="--disable-shared" />
	  <arg value="--prefix='$(pwd)'" />
    </exec>
    <exec dir="${root}/bin/mac" executable="make" failonerror="yes">
    </exec>
    <!-- build adapt it -->
    <exec executable="xcodebuild" failonerror="yes">
	  <arg value="ARCHS=x86_64" />
	  <arg value="ONLY_ACTIVE_ARCH=NO" />
	  <arg value="-project" />
	  <arg value="${root}/bin/mac/AdaptIt.xcodeproj" />
	  <arg value="-activetarget" />
	  <arg value="-configuration" />
	  <arg value="CocoaDebugWX2.9" />
    </exec>
  </target>

  <!-- 
  - compile_release_29 target
  - Compiles the CocoaReleaseWX2.9 AI build configuration.
  -->
  <target name="compile_release_29" depends="init"
        description="compile the source " >
    <!-- build wxwidgets for osx (unicode release) -->
    <exec dir="${3pt}/wxwidgets/current/wxWidgets/buildosxu" executable="../config" failonerror="yes">
	  <arg value="--with-cocoa" />
	  <arg value="--with-macosx-version-min=10.5" />
	  <arg value="--with-macosx-sdk=/Developer/SDKs/MacOSX10.5.sdk" />
	  <arg value="--enable-unicode" />
	  <arg value="--disable-shared" />
	  <arg value="--prefix='$(pwd)'" />
    </exec>
    <exec dir="${root}/bin/mac" executable="make" failonerror="yes">
    </exec>
    <!-- build adapt it -->
    <exec executable="xcodebuild" failonerror="yes">
	  <arg value="ARCHS=x86_64" />
	  <arg value="ONLY_ACTIVE_ARCH=NO" />
	  <arg value="-project" />
	  <arg value="${root}/bin/mac/AdaptIt.xcodeproj" />
	  <arg value="-activetarget" />
	  <arg value="-configuration" />
	  <arg value="CocoaReleaseWX2.9" />
    </exec>
  </target>
  
  <!-- 
  - compile_debug_28 target
  - Compiles the UnicodeDebugWX2.8 AI build configuration.
  -->
  <target name="compile_debug_28" depends="init"
        description="compile the source " >
    <!-- build wxwidgets for wxwin -->
    <exec dir="${root}/bin/mac" executable="config" failonerror="yes">
	  <arg value="ARCHS=x86_64" />
	  <arg value="ONLY_ACTIVE_ARCH=NO" />
	  <arg value="-project" />
	  <arg value="${root}/bin/mac/AdaptIt.xcodeproj" />
	  <arg value="-activetarget" />
	  <arg value="-configuration" />
	  <arg value="CocoaDebugWX2.9" />
    </exec>
    <exec dir="${root}/bin/mac" executable="make" failonerror="yes">
    </exec>
    <!-- build adapt it -->
    <exec executable="xcodebuild" failonerror="yes">
	  <arg value="ARCHS=i386" />
	  <arg value="ONLY_ACTIVE_ARCH=NO" />
	  <arg value="-project" />
	  <arg value="${root}/bin/mac/AdaptIt.xcodeproj" />
	  <arg value="-activetarget" />
	  <arg value="-configuration" />
	  <arg value="UnicodeDebugWX2.8" />
    </exec>
  </target>


  <!-- 
  - copy target
  - Runs the CallAllBatchSetups.bat file, that copies docs, help, localizations and .exes to the setup
  - staging areas for the installers. This is called from the build_release target.
  -->
  <target name="copy" depends="compile_release_29" description="copy the build results to the setup staging areas">
    <!-- copying is done through a batch file -->
	<echo message="Copying files" />
    <exec dir="${root}" executable="cmd" failonerror="yes">
	  <arg value="/c" />
	  <arg value="${root}\CallAllBatchSetups.bat" />
    </exec>
  </target>

  <!-- 
  - generate_installers
  - Runs all the installer scripts to create the installers.
  - output will be in the ${dist} directory if successful.
  - This target gets called from the daily build.
  -->
  <target name="generate_installer" depends="copy"
        description="generate the distribution" >
    <!-- Run ALL the Inno IDE scripts -->
    <!--
hdiutil create -megabytes 5 -fs HFS+ -volname myDisk ~/Desktop/myDisk
hdiutil create -srcfolder "${source}" -volname "${title}" -fs HFS+ \
      -fsargs "-c c=64,a=16,e=16" -format UDRW -size ${size}k pack.temp.dmg
Mount the disk image, and store the device name (you might want to use sleep for a few seconds after this operation):

device=$(hdiutil attach -readwrite -noverify -noautoopen "pack.temp.dmg" | \
         egrep '^/dev/' | sed 1q | awk '{print $1}')
Store the background picture (in PNG format) in a folder called ".background" in the DMG, and store its name in the "backgroundPictureName" variable.

Use AppleScript to set the visual styles (name of .app must be in bash variable "applicationName", use variables for the other properties as needed):

echo '
   tell application "Finder"
     tell disk "'${title}'"
           open
           set current view of container window to icon view
           set toolbar visible of container window to false
           set statusbar visible of container window to false
           set the bounds of container window to {400, 100, 885, 430}
           set theViewOptions to the icon view options of container window
           set arrangement of theViewOptions to not arranged
           set icon size of theViewOptions to 72
           set background picture of theViewOptions to file ".background:'${backgroundPictureName}'"
           make new alias file at container window to POSIX file "/Applications" with properties {name:"Applications"}
           set position of item "'${applicationName}'" of container window to {100, 100}
           set position of item "Applications" of container window to {375, 100}
           update without registering applications
           delay 5
           eject
     end tell
   end tell
' | osascript
Finialize the DMG by setting permissions properly, compressing and releasing it:

chmod -Rf go-w /Volumes/"${title}"
sync
sync
hdiutil detach ${device}
hdiutil convert "/pack.temp.dmg" -format UDZO -imagekey zlib-level=9 -o "${finalDMGName}"
rm -f /pack.temp.dmg 
-->

    <exec executable="iscc" failonerror="yes">
	<arg value="/q" />
	<arg value="${root}/Inno_Setup_Scripts/Adapt It Regular - Documentation Only.iss" />
    </exec>
  </target>

  <!-- 
  - build_continuous target
  - Compiles the Unicode Debug build.
  -->
  <target name="build_continuous" depends="clean, init, compile_debug_29" description="Continuous build target" >
  </target>

  <!-- 
  - build_release target
  - Compiles the regular (ansi) and Unicode Release builds and creates the installers.
  -->
  <target name="build_release" depends="clean, init, compile_release_29, generate_installer" description="Daily / Release build target" >
  </target>

</project>